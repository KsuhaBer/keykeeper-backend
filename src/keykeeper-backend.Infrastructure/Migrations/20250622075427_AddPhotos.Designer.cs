// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using keykeeper_backend.Infrastructure.KeykepperDbContext;

#nullable disable

namespace keykeeper_backend.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250622075427_AddPhotos")]
    partial class AddPhotos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("HouseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<int>("SettlementId")
                        .HasColumnType("integer");

                    b.Property<int?>("StreetId")
                        .HasColumnType("integer");

                    b.HasKey("AddressId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.HasIndex("SettlementId");

                    b.HasIndex("StreetId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DistrictId"));

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Municipalite", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MunicipalityId"));

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("MunicipalityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Municipalites");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.PropertyType", b =>
                {
                    b.Property<int>("PropertyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PropertyTypeId"));

                    b.Property<string>("PropertyTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PropertyTypeId");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.SaleListing", b =>
                {
                    b.Property<int>("SaleListingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SaleListingId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<double?>("Area")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ListingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomCount")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalFloors")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("SaleListingId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("SaleListings");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Settlement", b =>
                {
                    b.Property<int>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SettlementId"));

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer");

                    b.Property<string>("SettlementName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SettlementId");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Settlements");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StreetId"));

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StreetId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.UserFavorite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("SaleListingId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "SaleListingId");

                    b.HasIndex("SaleListingId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("keykeeper_backend.domain.Entities.ListingPhoto", b =>
                {
                    b.Property<int>("ListingPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ListingPhotoId"));

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SaleListingId")
                        .HasColumnType("integer");

                    b.HasKey("ListingPhotoId");

                    b.HasIndex("SaleListingId");

                    b.ToTable("ListingsPhotos");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Address", b =>
                {
                    b.HasOne("keykeeper_backend.Domain.Entities.District", "District")
                        .WithMany("Addresses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("keykeeper_backend.Domain.Entities.Settlement", "Settlement")
                        .WithMany("Addresses")
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("keykeeper_backend.Domain.Entities.Street", "Street")
                        .WithMany("Addresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("District");

                    b.Navigation("Settlement");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Municipalite", b =>
                {
                    b.HasOne("keykeeper_backend.Domain.Entities.Region", "Region")
                        .WithMany("Municipalites")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.SaleListing", b =>
                {
                    b.HasOne("keykeeper_backend.Domain.Entities.Address", "Address")
                        .WithMany("SaleListings")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("keykeeper_backend.Domain.Entities.PropertyType", "PropertyType")
                        .WithMany("SaleListings")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("keykeeper_backend.Domain.Entities.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("PropertyType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Settlement", b =>
                {
                    b.HasOne("keykeeper_backend.Domain.Entities.Municipalite", "Municipalite")
                        .WithMany("Settlements")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Municipalite");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.User", b =>
                {
                    b.HasOne("keykeeper_backend.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.UserFavorite", b =>
                {
                    b.HasOne("keykeeper_backend.Domain.Entities.SaleListing", "SaleListing")
                        .WithMany("Favorites")
                        .HasForeignKey("SaleListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("keykeeper_backend.Domain.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleListing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("keykeeper_backend.domain.Entities.ListingPhoto", b =>
                {
                    b.HasOne("keykeeper_backend.Domain.Entities.SaleListing", "SaleListing")
                        .WithMany("ListingPhotos")
                        .HasForeignKey("SaleListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleListing");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Address", b =>
                {
                    b.Navigation("SaleListings");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.District", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Municipalite", b =>
                {
                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.PropertyType", b =>
                {
                    b.Navigation("SaleListings");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Region", b =>
                {
                    b.Navigation("Municipalites");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.SaleListing", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("ListingPhotos");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Settlement", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.Street", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("keykeeper_backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
